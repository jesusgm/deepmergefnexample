{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["App","useState","inputOne","setInputOne","inputTwo","setInputTwo","name","lastname","age","result","setResult","isJsonValid","str","JSON","parse","e","className","href","mode","theme","value","onChange","json","replace","editorProps","$blockScrolling","onClick","console","log","objectOne","objectTwo","deepMerge","alert","handleMerge","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wUAkGeA,MA1Ff,WAAgB,IAAD,EACmBC,mBAAS,4BAD5B,mBACNC,EADM,KACIC,EADJ,OAImBF,mBAAS,4CAJ5B,mBAING,EAJM,KAIIC,EAJJ,OAQeJ,mBAAS,CACnCK,KAAM,OACNC,SAAU,MACVC,IAAK,KAXM,mBAQNC,EARM,KAQEC,EARF,KAcPC,EAAc,SAACC,GACnB,IACEC,KAAKC,MAAMF,GACX,MAAOG,GACP,OAAO,EAET,OAAO,GAoBT,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,gCACE,4BACE,uBAAGC,KAAK,6CAAR,yBAKJ,iCACE,yBAAKD,UAAU,SACb,yBAAKA,UAAU,aACb,sCACA,kBAAC,IAAD,CACEE,KAAK,OACLC,MAAM,SACNC,MAAOlB,EACPmB,SAAU,SAACC,GAAD,OAAUnB,EAAYmB,EAAKC,QAAQ,KAAM,OACnDjB,KAAK,WACLkB,YAAa,CAAEC,iBAAiB,MAGpC,yBAAKT,UAAU,aACb,sCACA,kBAAC,IAAD,CACEE,KAAK,OACLC,MAAM,SACNC,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAUjB,EAAYiB,EAAKC,QAAQ,KAAM,OACnDjB,KAAK,WACLkB,YAAa,CAAEC,iBAAiB,OAItC,yBAAKT,UAAU,SAASU,QAAS,kBApDrB,WAElB,GADAC,QAAQC,IAAI,SACRjB,EAAYT,IAAaS,EAAYP,GAAW,CAClD,IAAMyB,EAAYhB,KAAKC,MAAMZ,GACvB4B,EAAYjB,KAAKC,MAAMV,GAC7BuB,QAAQC,IAAIC,GACZF,QAAQC,IAAIE,GACZpB,EAAUqB,IAAUF,EAAWC,SAE1BnB,EAAYT,GAGf8B,MAAM,uBAFNA,MAAM,uBA0CmCC,KACrC,2CAEF,yBAAKjB,UAAU,UACb,yBAAKA,UAAU,gBACb,sCACA,kBAAC,IAAD,CAAWkB,IAAKzB,UC7EV0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.690fa54d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport ReactJson from \"react-json-view\";\nimport deepMerge from \"deepmergefn\";\nimport \"./App.css\";\n\nfunction App() {\n  const [inputOne, setInputOne] = useState(`{\n    \"name\": \"John\"\n}`);\n  const [inputTwo, setInputTwo] = useState(`{\n  \"lastname\": \"Doe\", \n  \"age\": 25\n}`);\n  const [result, setResult] = useState({\n    name: \"John\",\n    lastname: \"Doe\",\n    age: 25,\n  });\n\n  const isJsonValid = (str) => {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  };\n\n  const handleMerge = () => {\n    console.log(\"entra\");\n    if (isJsonValid(inputOne) && isJsonValid(inputTwo)) {\n      const objectOne = JSON.parse(inputOne);\n      const objectTwo = JSON.parse(inputTwo);\n      console.log(objectOne);\n      console.log(objectTwo);\n      setResult(deepMerge(objectOne, objectTwo));\n    } else {\n      if (!isJsonValid(inputOne)) {\n        alert(\"JSON 1 is not valid\");\n      } else {\n        alert(\"JSON 2 is not valid\");\n      }\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <header>\n          <h1>\n            <a href=\"https://www.npmjs.com/package/deepmergefn\">\n              deepMergeFn example\n            </a>\n          </h1>\n        </header>\n        <section>\n          <div className=\"input\">\n            <div className=\"input-one\">\n              <h3>JSON 1</h3>\n              <AceEditor\n                mode=\"json\"\n                theme=\"github\"\n                value={inputOne}\n                onChange={(json) => setInputOne(json.replace(/\"/g, '\"'))}\n                name=\"inputOne\"\n                editorProps={{ $blockScrolling: true }}\n              />\n            </div>\n            <div className=\"input-two\">\n              <h3>JSON 2</h3>\n              <AceEditor\n                mode=\"json\"\n                theme=\"github\"\n                value={inputTwo}\n                onChange={(json) => setInputTwo(json.replace(/\"/g, '\"'))}\n                name=\"inputOne\"\n                editorProps={{ $blockScrolling: true }}\n              />\n            </div>\n          </div>\n          <div className=\"button\" onClick={() => handleMerge()}>\n            <button>Merge!</button>\n          </div>\n          <div className=\"output\">\n            <div className=\"input-result\">\n              <h3>Result</h3>\n              <ReactJson src={result} />\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}